@page "/posts-radzen"
@using BlazorWasmBlogClient.Models
@using BlazorWasmBlogClient.Services.IServices
@using Microsoft.AspNetCore.Authorization
@inject IPostService PostService
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<h1 class="text-center">Posts</h1>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="4" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@Posts" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn TItem="Post" Property="Id" Filterable="false" Title="Id" Frozen="true" Width="10px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Post" Property="Title" Title="Title" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Post" Property="Description" Title="Description" Width="160px" />
        <RadzenDataGridColumn TItem="Post" Property="Tags" Title="Tags" Width="20px" />
        <RadzenDataGridColumn TItem="Post"Title="Image" Width="200px">
            <Template Context="data">
                <RadzenImage Path="@data.ImagePath" class="rz-gravatar"></RadzenImage>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Post" Property="CreationDate" Title="Creation Date" Width="160px" />
        <RadzenDataGridColumn TItem="Post" Property="UpdateDate" Title="Update Date" Width="160px" />
        <RadzenDataGridColumn TItem="Post" Property="Id">
            <Template Context="data">
                <a href="edit-book/@data.Id" class="btn btn-success btn-sm">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    Edit
                </a>
                <button @onclick="() => HandleDeletePost(data.Id)" class="btn btn-danger btn.sm">
                    <span class="oi oi-delete" aria-hidden="true"></span>
                    Delete
                </button>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<DeleteConfirm ParentIsProcessing="IsProcessing" ConfirmationChange="ClickConfirmDelete"></DeleteConfirm>

@code {
    public IEnumerable<Post> Posts { get; set; } = new List<Post>();
    private bool IsProcessing { get; set; } = false;
    private int? IdPostDelete { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Posts = await PostService.GetPosts();
    }

    public async Task HandleDeletePost(int id)
    {
        IdPostDelete = id;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ClickConfirmDelete(bool confirmed)
    {
        IsProcessing = true;
        if (confirmed && IdPostDelete != null)
        {
            var res = await PostService.DeletePost(IdPostDelete.Value);
            await JsRuntime.ToastrSuccess("Post deleted!");
            Posts = await PostService.GetPosts();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }

}
