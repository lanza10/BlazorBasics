@page "/edit-property/{Id:int}"

@using BlazorServerProperties.Models.DTO
@using BlazorServerProperties.Services
@using Repository.IRepository
@inject IPropertyRepository PropRepo
@inject ICategoryRepository CatRepo
@inject IPropertyImageRepository ImgRepo
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

@attribute [Authorize(Roles = "Admin")]

<h1 class="text-center">Properties</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h2 class="text-dark">New property</h2>
            </div>
        </div>
    </div>
    <div class="card-body">
        <EditForm Model="Property" OnValidSubmit="() => HandleEditProperty()">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="container">
                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Name: </label>
                        </div>
                        <div class="col-4">
                            <InputText @bind-Value="Property.Name" class="form-control" placeholder="Insert Property Name"></InputText>
                            <ValidationMessage For="() => Property.Name"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Description: </label>
                        </div>
                        <div class="col-4">
                            <InputText @bind-Value="Property.Description" class="form-control" placeholder="Insert Property Description"></InputText>
                            <ValidationMessage For="() => Property.Description"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Area: </label>
                        </div>
                        <div class="col-4">
                            <InputNumber @bind-Value="Property.Area" class="form-control"></InputNumber>
                            <ValidationMessage For="() => Property.Area"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Rooms: </label>
                        </div>
                        <div class="col-4">
                            <InputNumber @bind-Value="Property.Rooms" class="form-control"></InputNumber>
                            <ValidationMessage For="() => Property.Rooms"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Bathrooms: </label>
                        </div>
                        <div class="col-4">
                            <InputNumber @bind-Value="Property.Bathrooms" class="form-control"></InputNumber>
                            <ValidationMessage For="() => Property.Bathrooms"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Parking spaces: </label>
                        </div>
                        <div class="col-4">
                            <InputNumber @bind-Value="Property.Parking" class="form-control"></InputNumber>
                            <ValidationMessage For="() => Property.Parking"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Price: </label>
                        </div>
                        <div class="col-4">
                            <InputNumber @bind-Value="Property.Price" class="form-control"></InputNumber>
                            <ValidationMessage For="() => Property.Price"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Is Active: </label>
                        </div>
                        <div class="col-4">
                            <InputCheckbox @bind-Value="Property.Active" class="form-check"></InputCheckbox>
                            <ValidationMessage For="() => Property.Active"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-2">
                            <label>Category: </label>
                        </div>
                        <div class="col-4">
                            <InputSelect @bind-Value="_selectedCategory.Id" class="form-control">
                                <option value="">--Select Category--</option>
                                @foreach (var cat in DropDownCategoryDto)
                                {
                                    <option value=@cat.Id>@cat.CategoryName</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <br />
                    <div class="form-group" style="padding-top:30px; padding-bottom:30px;">
                        <hr />
                        <h4>Property Images</h4>
                        <InputFile OnChange="HandleFileUpload" multiple></InputFile>
                        <div class="row">
                            @if (FileUploadHasStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="bi bi-arrow-repeat"></i> Please wait while files are uploading</span>
                                </div>
                            }
                            @if (Property.ImagesUrl != null && Property.ImagesUrl.Any())
                            {
                                var serial = 1;
                                foreach (var image in Property.ImagesUrl)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="property-image" style="background: url('@image') 50% 50%;">
                                            <span class="title-property-image">@serial</span>
                                        </div>
                                        <button type="button" @onclick="() => DeleteImage(image)" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-2">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-plus-circle-fill"></i>&nbsp;
                                Update
                            </button>
                        </div>
                        <div class="col-2">
                            <button type="button" class="btn btn-secondary" @onclick="@(() => NavManager.NavigateTo("/properties"))">
                                <i class="bi bi-arrow-left-circle-fill"></i>&nbsp;
                                Go back
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>

    </div>
</div>

@code {
    private PropertyDTO Property { get; set; } = new PropertyDTO();
    private readonly DropDownCategoryDTO _selectedCategory = new DropDownCategoryDTO();
    private PropertyImageDTO ImgDto { get; set; } = new PropertyImageDTO();
    public bool FileUploadHasStarted { get; set; } = false;
    private List<string> DeletedImagesName { get; set; } = new List<string>();
    [Parameter]
    public int? Id { get; set; }

    //Obtain categoryList into dropDown
    private IEnumerable<DropDownCategoryDTO> DropDownCategoryDto { get; set; } = new List<DropDownCategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        DropDownCategoryDto = await CatRepo.GetDropDownCategories();

        if (Id != null)
        {
            Property = await PropRepo.GetPropertyById(Id.Value);
            _selectedCategory.Id = Property.CategoryId;
            if (Property?.Images != null)
            {
                Property.ImagesUrl = Property.Images.Select(u => u.PropertyImageUrl).ToList();
            }
        }

    }


    public async Task HandleEditProperty()
    {
        Property.CategoryId = _selectedCategory.Id;
        var updatePropRes = await PropRepo.UpdateProperty(Property.Id, Property);
        if (Property.ImagesUrl != null && Property.ImagesUrl.Any() || DeletedImagesName != null && DeletedImagesName.Any())
        {
            if (DeletedImagesName != null && DeletedImagesName.Any())
            {
                foreach (var deletedImageName in DeletedImagesName)
                {
                    var imageName = deletedImageName.Replace($"{NavManager.BaseUri}propertiesImages/", "");
                    var result = FileUpload.DeleteFile(imageName);
                    await ImgRepo.DeletePropImageByUrl(deletedImageName);
                }
            }

            await AddPropertyImages(updatePropRes);
            await JsRuntime.ToastrSuccess("Property updated successfully");
            NavManager.NavigateTo("/properties");
        }

    }

    public async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        FileUploadHasStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Any())
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    var fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg"
                        || fileInfo.Extension.ToLower() == ".png"
                        || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Only .png , .jpg and .jpeg extensions are allowed");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (Property.ImagesUrl == null || !Property.ImagesUrl.Any())
                    {
                        Property.ImagesUrl = new List<string>();
                    }

                    Property.ImagesUrl.AddRange(images);
                }
                else
                {
                    await JsRuntime.ToastrError("Image upload failed");
                    return;
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            FileUploadHasStarted = false;
        }
    }

    internal async Task DeleteImage(string url)
    {
        try
        {
            var imgIndex = Property.ImagesUrl.FindIndex(x => x == url);
            var imgName = url.Replace($"{NavManager.BaseUri}propertiesImages/", "");
            DeletedImagesName ??= new List<string>();
            DeletedImagesName.Add(url);
            Property.ImagesUrl.RemoveAt(imgIndex);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task AddPropertyImages(PropertyDTO prop)
    {
        foreach (var url in Property.ImagesUrl)
        {
            if (Property.Images != null && Property.Images.Any(x => x.PropertyImageUrl == url))
            {
                continue;
            }
            ImgDto = new PropertyImageDTO()
                {
                    PropertyId = prop.Id,
                    PropertyImageUrl = url,
                };
            await ImgRepo.CreatePropImage(ImgDto);
        }
    }

}


